#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'securerandom'
require 'pathname'

TOKEN = ENV.fetch('GITHUB_TOKEN')
VERSION = "6.0.3.2"

def req(query)
  http = Net::HTTP.new("api.github.com", 443)
  http.use_ssl = true
  header = {
    "Authorization" => "Bearer #{TOKEN}",
    'Content-Type' => 'application/json',
    'User-Agent' => 'gem_rbs client',
  }
  resp = http.request_post('/graphql', JSON.generate(query), header)
  JSON.parse(resp.body, symbolize_names: true).tap do |content|
    raise content[:errors].inspect if content[:errors]
  end
end

class QueryBuilder
  attr_reader :variables

  def initialize
    @queries = []
    @variables = {}
  end

  def add(query, variables)
    query = query.dup
    variables = variables.transform_keys do |key|
      next key unless @variables.key?(key)

      new_key = key + '_' + SecureRandom.hex(8)
      query.gsub!(key, new_key)
      new_key
    end

    @queries << query
    @variables.merge!(variables)
  end

  def query
    # TODO: Allow non-String type for variables
    "query(#{variables.keys.map { |v| "$#{v}: String!" }.join(',')}) { #{@queries.join("\n")} }"
  end
end

gems = %w[activesupport actionpack activejob activemodel actionview activerecord railties]

builder = QueryBuilder.new
gems.each do |gem|
  path = "main:gems/#{gem}/#{VERSION}"
  builder.add(<<~GRAPHQL, { 'path' => path })
    #{gem}:repository(owner: "ruby", name: "gem_rbs_collection") {
      object(expression: $path) {
        ... on Tree {
          entries {
            name
            object {
              ... on Blob {
                isTruncated
                text
              }
            }
          }
        }
      }
    }
  GRAPHQL
end

resp = req(query: builder.query, variables: builder.variables)

resp[:data].each do |gem_name, gem_value|
  gem_value.dig(:object, :entries).each do |entry|
    fname = entry[:name]
    if fname.end_with?('.rbs')
      content =
        if entry.dig(:object, :isTruncated)
          `curl -H 'Accept: application/vnd.github.v3.raw' -H Authorization: token #{TOKEN} https://api.github.com/repos/ruby/gem_rbs_collection/contents/gems/#{gem_name}/#{VERSION}/#{fname}`
        else
          entry.dig(:object, :text)
        end
      dir = Pathname("gem_rbs/gems/#{gem_name}/#{VERSION}")
      dir.mkpath
      dir.join(fname).write(content)
    end
  end
end
